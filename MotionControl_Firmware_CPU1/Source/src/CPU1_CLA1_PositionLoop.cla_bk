/******************************************************************************
 * Copyright (C) 2017 by Yifan Jiang                                          *
 * jiangyi@student.ethz.com                                                   *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                       *
 ******************************************************************************/

/*
* implement CPU1_CLA1 position controller
*/

#include "CPU1_CLA1_common.h"
#include "F28x_Project.h"

// inverse clark transformation matrix coefficients
// only required ones are declared
const float32_t INV_CLARK_A21 = -0.50000000000000000000f;
const float32_t INV_CLARK_A22 = 0.86602540378443859659f; // sqrt(3)/2

void CLA_PositionLoop(){

  // setpoint filtering

  // implement PID controller
  PL_PosError = (float32_t)(PL_Setpoint_Pos-PL_ActualPosition);
  PL_PosIntegral += PL_Ki1 * PL_PosError;

  PL_OutputRaw = PL_Kp1*PL_PosError + PL_PosIntegral;
  PL_OutputRaw += PL_FF_Vel * PL_Setpoint_Vel;
  PL_OutputRaw += PL_FF_Accel * PL_Setpoint_Accel;

  // output level limiting and anti-windup
  if(PL_OutputRaw > PL_OutputLimit){
    PL_PosIntegral -= PL_OutputRaw - PL_OutputLimit;
    PL_OutputRaw = PL_OutputLimit;
  } else if(PL_OutputRaw < -PL_OutputLimit) {
    PL_PosIntegral -= PL_OutputRaw + PL_OutputLimit;
    PL_OutputRaw = -PL_OutputLimit;
  }

  // output filtering

  // inv-park
  PL_OutputCurrent_Q = PL_OutputRaw;
  PL_OutputCurrent_D = 0;
  PL_OutputCurrent_Alpha = PL_OutputCurrent_D * CommutationAngle_Cos -
                           PL_OutputCurrent_Q * CommutationAngle_Sin;
  PL_OutputCurrent_Beta = PL_OutputCurrent_Q * CommutationAngle_Cos +
                           PL_OutputCurrent_D * CommutationAngle_Sin;


  // inv-clark, obtain phase current setpoint
  // (A and B only, C = -A-B implied)
  CL_Setpoint_Ia = PL_OutputCurrent_Alpha;
  CL_Setpoint_Ib = INV_CLARK_A21*PL_OutputCurrent_Alpha +
                    INV_CLARK_A22*PL_OutputCurrent_Beta;

}
