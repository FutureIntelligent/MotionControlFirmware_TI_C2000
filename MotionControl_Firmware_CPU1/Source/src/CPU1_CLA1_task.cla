/******************************************************************************
 * Copyright (C) 2017 by Yifan Jiang                                          *
 * jiangyi@student.ethz.com                                                   *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                       *
 ******************************************************************************/

/*
* implement CPU1_CLA1 task functions,
*/

#include "CPU1_CLA1_common.h"
#include "F28x_Project.h"

__interrupt void Cla1Task1 ( void )
{
  RESTART_CLOCK;
  Cla1SoftIntRegs.SOFTINTEN.bit.TASK1 = 1;

  // reading ADC samples
  AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;
  sensorSampleA = AdcaResultRegs.ADCRESULT0;
  sensorSampleB = AdcbResultRegs.ADCRESULT0;
  sensorSampleA *= CLA_CurrentSenseGain_Phase;
  sensorSampleB *= CLA_CurrentSenseGain_Phase;

  // pass samples through low-pass filter

  // save sample to buffer
  CLA_SampleBufferA[CLA_SampleCounter] = sensorSampleA;
  CLA_SampleBufferB[CLA_SampleCounter++] = sensorSampleB;
  dcVoltageSense = AdcbResultRegs.ADCRESULT1 * CLA_VoltageSenseGain;

  if(CLA_SampleCounter==20){
    CLA_SampleCounter = 0;
  }

  if(CLA_CycleCounter==9){
    CLA_CycleCounter = 0;
    CLA_SampleBufferActiveHalf = (~CLA_SampleBufferActiveHalf) & 0x0001;
    Cla1SoftIntRegs.SOFTINTFRC.bit.TASK1 = 1;
  } else {
    CLA_CycleCounter += 1;
  }

  READ_CLOCK(timeCounter);
}

__interrupt void Cla1Task2 ( void ) {}

__interrupt void Cla1Task3 ( void ) {}

__interrupt void Cla1Task4 ( void ) {}

__interrupt void Cla1Task5 ( void ) {}

__interrupt void Cla1Task6 ( void ) {}

__interrupt void Cla1Task7 ( void ) {}

__interrupt void Cla1Task8 ( void ) {}
